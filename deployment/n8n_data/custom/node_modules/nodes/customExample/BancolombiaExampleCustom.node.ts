import type {
  IExecuteFunctions,
  INodeExecutionData,
  INodeType,
  INodeTypeDescription
} from 'n8n-workflow';
import { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';
// import { secretsManagerGetSecretREST } from '../aws/GenericFunctions';
// import { getN8NRedisCredentials, setupRedisClient, setValue, getValue } from '../utils/utilities';

export class BancolombiaExampleCustom implements INodeType {
  description: INodeTypeDescription = {
    displayName: 'Bancolombia Example Custom',
    name: 'bancolombiaExampleCustom',
    icon: {
      light: 'file:../../icons/bancolombia-ia.svg',
      dark: 'file:../../icons/bancolombia-ia.dark.svg',
    },
    group: ['input'],
    version: 1,
    description:
      'Basic Example Node with credentials this is just for learning purposes',
    defaults: {
      name: 'bancolombiaExampleCustom',
    },
    inputs: [NodeConnectionTypes.Main],
    outputs: [NodeConnectionTypes.Main],
    usableAsTool: true,
    credentials: [
      {
        name: 'bancolombiaPostgres',
        displayOptions: {
          show: {
            authentication: ['bancolombiaPostgres'],
          },
        },
        required: true,
      }
    ],
    properties: [
      // Node properties which the user gets displayed and
      // can change on the node.
      {
        displayName: 'Credentials',
        name: 'credentials',
        type: 'credentials',
        default: '',
        displayOptions: {
          show: {
            authentication: ['bancolombiaPostgres'],
          },
        },
      },
      {
        displayName: 'My String',
        name: 'myString',
        type: 'string',
        default: '',
        placeholder: 'Placeholder value',
        description: 'The description text',
      },
      {
        displayName: 'Authentication',
        name: 'authentication',
        type: 'options',
        options: [
          {
            name: 'Auth 1',
            value: 'bancolombiaPostgres',
          },
          {
            name: 'None',
            value: 'none',
          },
        ],
        default: 'none',
        description: 'The way to authenticate with your endpoint',
      },
    ],
  };

  // The function below is responsible for actually doing whatever this node
  // is supposed to do. In this case, we're just appending the `myString` property
  // with whatever the user has entered.
  // You can make async calls and use `await`.
  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    const items = this.getInputData();
    let item: INodeExecutionData;
    let myString: string;

    // const redisCredentials = getN8NRedisCredentials.call(this);
    // console.log('EMANUEL DEBUG - Redis Credentials: ', redisCredentials);
    // const redisClient = setupRedisClient(redisCredentials);
    // await redisClient.connect();
    // await redisClient.ping();
    // await setValue.call(this, redisClient, 'test_key', 'test_value', false, 3600, 'string');
    // const value = await getValue(redisClient, 'test_key');
    // console.log('EMANUEL DEBUG - Value from Redis: ', value);
    // await redisClient.quit();

    const authentication = this.getNodeParameter('authentication', 0);
    console.log('EMANUEL - DEBUG - Auth Type', authentication);

    const secrets = await this.getCredentials('bancolombiaPostgres');
    console.log('EMANUEL DEBUG - Secrets from credentials: ', secrets);
    const response = await this.helpers.httpRequestWithAuthentication.call(
      this,
      'bancolombiaPostgres',
      { url: '' },
    );
    console.log(
      'EMANUEL DEBUG - Response from httpRequestWithAuthentication: ',
      response,
    );
    // const credentials = await secretsManagerGetSecretREST.call(this);
    // console.log('EMANUEL DEBUG - Credentials from Secrets Manager: ', credentials);
    // Iterates over all input items and add the key "myString" with the
    // value the parameter "myString" resolves to.
    // (This could be a different value for each item in case it contains an expression)
    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
      try {
        myString = this.getNodeParameter('myString', itemIndex, '') as string;
        item = items[itemIndex];

        item.json.myString = myString;
        // item.json.credentials = credentials;
      } catch (error) {
        // This node should never fail but we want to showcase how
        // to handle errors.
        if (this.continueOnFail()) {
          items.push({
            json: this.getInputData(itemIndex)[0].json,
            error,
            pairedItem: itemIndex,
          });
        } else {
          // Adding `itemIndex` allows other workflows to handle this error
          if (error.context) {
            // If the error thrown already contains the context property,
            // only append the itemIndex
            error.context.itemIndex = itemIndex;
            throw error;
          }
          throw new NodeOperationError(this.getNode(), error, {
            itemIndex,
          });
        }
      }
    }

    return [items];
  }
}
