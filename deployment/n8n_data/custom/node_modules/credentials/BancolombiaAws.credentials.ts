import type {
  ICredentialDataDecryptedObject,
  ICredentialType,
  IDataObject,
  IHttpRequestHelper,
  INodeProperties,
  IHttpRequestOptions,
} from 'n8n-workflow';
import { AwsCredentialsType } from '../nodes/AWS/types';
import { getSTSApiRequestCredentials, getAWSApiRequestOptions } from '../nodes/AWS/utils';
import { AWSSecretsProperties } from './AWSBase.properties';


export class BancolombiaAws implements ICredentialType {
  name = 'bancolombiaAws';

  displayName = 'Bancolombia AWS';

  icon = {
    light: 'file:../icons/bancolombia-ia.svg',
    dark: 'file:../icons/bancolombia-ia.dark.svg',
  } as const;

  properties: INodeProperties[] = [
    ...AWSSecretsProperties
  ];

  async preAuthentication(
    this: IHttpRequestHelper,
    credentials: ICredentialDataDecryptedObject,
  ): Promise<IDataObject> {
    console.log('CUSTOM N8N CREDENTIALS: PreAuthenticate hook called');
    try {
      switch (credentials.awsAuthenticationMethod) {
        case 'n8nRole': {
          const awsCredentials = await getSTSApiRequestCredentials.call(this);
          console.log('AWS Credentials from N8N Role:', awsCredentials);
          return { awsSecretKeysValue: awsCredentials };
        }
        case 'assumeRole': {
          const roleArn = (credentials.roleArn as string) ?? '';
          if (!roleArn.trim()) {
            throw new Error(
              'Role ARN is required for Assume Role AWS authentication method',
            );
          }

          const baseCredentials = await getSTSApiRequestCredentials.call(this);
          console.log('AWS Credentials from Assume Role N8N:', baseCredentials);

          const assumeRoleRequest = (): IHttpRequestOptions => ({
            method: 'POST',
            url: '',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            qs: {
              service: 'sts',
              path: '/',
              query: {
                Action: 'AssumeRole',
                Version: '2011-06-15',
                RoleArn: roleArn,
                RoleSessionName: `n8n-custom-api-session-${Date.now()}`,
                DurationSeconds: '3600',
              },
            },
          });

          const assumeRoleSigned = await getAWSApiRequestOptions(
            assumeRoleRequest(),
            { ...credentials, ...baseCredentials } as AwsCredentialsType,
          );
          console.log('Request Options Signed:', assumeRoleSigned);
          const response = await this.helpers.httpRequest(assumeRoleSigned);
          console.log('Response:', response);

          const assumedCredentials =
            response?.AssumeRoleResponse?.AssumeRoleResult?.Credentials;
          if (!assumedCredentials) {
            throw new Error('Unable to assume role with the provided ARN');
          }

          const mergedCredentials: AwsCredentialsType = {
            ...baseCredentials,
            accessKeyId: assumedCredentials.AccessKeyId,
            secretAccessKey: assumedCredentials.SecretAccessKey,
            sessionToken: assumedCredentials.SessionToken,
          };
          console.log('Assumed Credentials:', mergedCredentials);
          return { awsSecretKeysValue: mergedCredentials };
        }
        case 'accessKeys': {
          const accessKeyId = credentials.accessKeyId as string | undefined;
          const secretAccessKey = credentials.secretAccessKey as
            | string
            | undefined;
          if (!accessKeyId || !secretAccessKey) {
            throw new Error(
              'Access Key ID and Secret Access Key are required for Access Keys AWS authentication method',
            );
          }

          const awsCredentials: AwsCredentialsType = {
            accessKeyId,
            secretAccessKey,
            sessionToken:
              (credentials.sessionToken as string | undefined) || undefined,
            temporaryCredentials: true,
            customEndpoints: false,
            expiration: 3600,
            region:
              (credentials.region as AwsCredentialsType['region']) ??
              'us-east-1',
          };
          console.log('AWS Credentials from Access Keys:', awsCredentials);
          return { awsSecretKeysValue: awsCredentials };
        }
        default: {
          console.log(
            'Unsupported AWS authentication method:',
            credentials.awsAuthenticationMethod,
          );
          break;
        }
      }

      return { awsSecretKeysValue: {} };
    } catch (error) {
      const message = error instanceof Error ? error.message : String(error);
      throw new Error(
        `There was an error retrieving AWS Secrets Keys: ${message}`,
      );
    }
  }

  async authenticate(
    rawCredentials: ICredentialDataDecryptedObject,
    requestOptions: IHttpRequestOptions,
  ): Promise<IHttpRequestOptions> {
    const requestOptionsSigned = await getAWSApiRequestOptions(
      requestOptions,
      {
        ...rawCredentials,
        ...(rawCredentials.awsSecretKeysValue as AwsCredentialsType),
      } as AwsCredentialsType,
    );
    return requestOptionsSigned;
  }
}
