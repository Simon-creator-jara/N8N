services:

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/proxy_headers.conf:/etc/nginx/proxy_headers.conf:ro
    networks:
      - n8n-local

  redis:
    image: redis:alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - 6379:6379
    expose:
      - 6379
    volumes:
      # - redis_data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
    healthcheck:
      test:   ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-password}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: always
    networks:
      - n8n-local
 
  db:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      # - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_DB=postgres-db
      - POSTGRES_USER=postgres-user
      - POSTGRES_PASSWORD=postgres-pass
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    healthcheck:
      test:   ["CMD-SHELL", "pg_isready -U postgres-user -d postgres-db"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - n8n-local
 
  localstack:
    image: localstack/localstack:2.0
    ports:
      - '4566:4566' # LocalStack endpoint
      - '4510-4559:4510-4559' # external services port range
    expose:
      - '4566'
      - '4510-4559'
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DEBUG=${DEBUG-}
      - CURL_CA_BUNDLE=/usr/local/share/ca-certificates/bancolombia_certs.crt
      - SSL_CERT_FILE=/usr/local/share/ca-certificates/bancolombia_certs.crt
      # LocalStack persistence configuration
      - PERSISTENCE=1
      - SERVICES=s3
    volumes:
      # LocalStack data persistence
      # - ./localstack_data:/var/lib/localstack
      # - ./localstack_data:/tmp/localstack
      - ./deployment/localstack-script.sh:/etc/localstack/init/ready.d/script.sh:ro
      - '/var/run/docker.sock:/var/run/docker.sock'
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates/
    healthcheck:
      test:   ["CMD-SHELL", "curl -f http://localhost:4566/_localstack/health"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      n8n-local:
        aliases:
          - "localhost.localstack.cloud"
          - "s3.localhost.localstack.cloud"
          - "us-east-1.localhost.localstack.cloud"   # optional region alias
          - "s3.us-east-1.localhost.localstack.cloud"
 
  n8n-main:
    image: docker.n8n.io/n8nio/n8n
    ports:
      - "5678:5678"
    #volumes:
      #- n8n_data:/home/node/.n8n
    expose: 
      - 5678
    environment:
      # --- Instance Configuration ---
      - N8N_INSTANCE_TYPE=main
      - EXECUTIONS_MODE=queue
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - N8N_PROTOCOL=http
      - N8N_ENCRYPTION_KEY=your-encryption-key # CHANGE THIS!

      # --- PostgreSQL Configuration ---
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=postgres-db
      - DB_POSTGRESDB_USER=postgres-user
      - DB_POSTGRESDB_PASSWORD=postgres-pass
      - DB_POSTGRESDB_SCHEMA=public

      # --- Redis Configuration ---
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      - QUEUE_HEALTH_CHECK_ACTIVE=true

      # --- S3/Localstack Binary Data Storage ---
      - N8N_DEFAULT_BINARY_DATA_MODE=default
      - N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME=local-s3-bucket
      - N8N_EXTERNAL_STORAGE_S3_ENDPOINT=http://localstack:4566
      - N8N_EXTERNAL_STORAGE_S3_REGION=us-east-1
      - N8N_EXTERNAL_STORAGE_S3_PATH_STYLE=true
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test

      # --- Logging & Monitoring ---
      - N8N_LOG_LEVEL=debug
      - N8N_LOG_OUTPUT=console
      - N8N_METRICS=true
      - N8N_PATH=/n8n/n8n-main/v1/
      - N8N_ENDPOINT_REST=n8n/n8n-main/v1/rest
      - N8N_ENDPOINT_MCP=n8n/n8n-main/v1/mcp
      - N8N_ENDPOINT_MCP=n8n/n8n-main/v1/mcp
      - N8N_HOST=localhost
      - DEBUG=*
      - NODE_DEBUG=*

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - n8n-local
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl  http://localhost:5678/healthz | grep -q '\"status\":\"ok\"' || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 90s

  broker:
    image: apache/kafka:latest
    ports: 
      - "29092:29092"
    expose: 
      - 29092
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,CONTROLLER://broker:9093,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPIC_ENABLE: "true"
    networks:
      - n8n-local
    restart: always
 
networks:
  n8n-local:
    name: n8n-local